#line 245 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
struct Buffer
{
  sp: StringPiece;
  pos: int;

  fun atend => self.pos >= self.sp.len.int;

  fun get =>
    if self.atend then char ""
    else (self.sp.data) . (self.pos)
  ;

  proc next {
    if not self*.atend do
      pre_incr self.pos;
    done
  }

  fun advanced =>
    if self.atend then self
    else Buffer (self.sp, self.pos + 1)
  ;
}

ctor Buffer (p:&string) =>
  Buffer (p.StringPiece,0)
;

instance Str[Buffer] {
  fun str (b:Buffer) => "@"+b.pos.str;
}

#line 280 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip match_string (s:string)
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
nextmatch:>
  var b = read io.inp;
  for i in 0..< s.len.int do
    if s.[i] != b.get goto nextmatch;
    b&.next;
  done
  write (io.out, b);
  goto nextmatch;
}

#line 297 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip match_white
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
  while true do
    var b = read io.inp;
    while not b.atend and b.get <= char ' ' perform b&.next;
    write (io.out,b);
  done
}

#line 312 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip match_regex (r:RE2)
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
  while true do
    var b = read io.inp;
//println$ "Match regex " + r.str;
    var matched = varray[StringPiece] (1uz,StringPiece());
    var result = Match(r,b.sp,b.pos,ANCHOR_START,matched.stl_begin,1);
//println$ "Match result " + result.str;
    if result do
//println$ "Matched OK, match len = " + matched.0.len.str;
      var b2 = Buffer (b.sp,b.pos+matched.0.len.int);
//println$ "Writing buffer = " + b2.str;
      write(io.out,b2);
    done
  done
}

#line 336 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
device cident_matcher = match_regex (RE2 "[A-Za-z][A-Za-z0-9_]*");

#line 342 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
device decimal_integer_matcher = match_regex (RE2 "[0-9]+");

#line 348 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip match_string_literal
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
  var b = read io.inp;
  if b.atend return; // end of data
  var leadin = b.get;
//println$ "string literal matcher got char " + leadin.str;
  if not (leadin in (char '"', char "'")) return;
//println$ "Got valid string start .. ";
  b&.next;
  if b.atend return;
  var ch = b.get;
  while ch != leadin do
    b&.next;
    if b.atend return;
    ch = b.get;
    if ch == char "\n" return; // end of line
  done
  b&.next;
  io.out `write` b;
}

#line 379 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
typedef pardat_t[T] = Buffer * T;

chip leaf_capture[T]
  (
    scan: iochip_t[Buffer,Buffer],
    newstate: pardat_t[T] * Buffer -> pardat_t[T]
  )
  connector io
    pin inp: %<pardat_t[T]
    pin out: %>pardat_t[T]
{
  var b,pd = read io.inp;
  var rin,win= mk_ioschannel_pair[Buffer]();
  var rout,wout= mk_ioschannel_pair[Buffer]();
  spawn_fthread (scan (inp=rin,out=wout));
  write(win,b);
  var b2 = read rout;
  var s = newstate ((b,pd),b2);
  write (io.out,s);
}



#line 411 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip optional (p:iochip_t[Buffer,Buffer])
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
  var b = read io.inp;
  device src = source b;
  device both = tryall_list (
    pipeline_list (oneshot[Buffer],p).list,
    pipeline_list (oneshot[Buffer], debug_buffer[Buffer] "Epsilon").list
  ).list;
  circuit
    connect src.out, both.inp
    wire io.out to both.out
  endcircuit
}

#line 430 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"

chip oneormore_matcher (A:iochip_t[Buffer,Buffer])
connector chans
  pin inp: %<Buffer
  pin out: %>Buffer
{
 device As = oneormore_matcher A;
 device As2 = pipeline_list (A,As).list;
 device Ass = tryall_list (A, As2).list;
 circuit
   wire chans.inp to Ass.inp
   wire chans.out to Ass.out
 endcircuit
}

#line 447 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"

union symbol_t =
  | Terminal of string
  | Nonterminal of string
;

typedef production_t = list[symbol_t];
typedef alternatives_t = list[production_t];

typedef grammar_t = (start:string, strdict[alternatives_t]);

chip parse_simple_grammar
  connector io
    pin inp: %<string
    pin out: %>grammar_t
{
}


