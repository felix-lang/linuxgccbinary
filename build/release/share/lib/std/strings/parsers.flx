#line 237 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
struct Buffer
{
  sp: StringPiece;
  pos: int;

  fun atend => self.pos >= self.sp.len.int;

  fun get =>
    if self.atend then char ""
    else (self.sp.data) . (self.pos)
  ;

  proc next {
    if not self*.atend do
      pre_incr self.pos;
    done
  }

  fun advanced =>
    if self.atend then self
    else Buffer (self.sp, self.pos + 1)
  ;
}

ctor Buffer (p:&string) =>
  Buffer (p.StringPiece,0)
;

instance Str[Buffer] {
  fun str (b:Buffer) => "@"+b.pos.str;
}

#line 272 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip match_string (s:string)
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
nextmatch:>
  var b = read io.inp;
  for i in 0..< s.len.int do
    if s.[i] != b.get goto nextmatch;
    b&.next;
  done
  write (io.out, b);
  goto nextmatch;
}

#line 289 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip match_white
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
  while true do
    var b = read io.inp;
    while not b.atend and b.get <= char ' ' perform b&.next;
    write (io.out,b);
  done
}

#line 304 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip match_regex (r:RE2)
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
  while true do
    var b = read io.inp;
    var matched = varray[StringPiece] (1uz,StringPiece());
    var result = Match(r,b.sp,b.pos,ANCHOR_START,matched.stl_begin,1);
    if result do
      write(io.out,Buffer(b.sp,b.pos + matched.0.len.int));
    done
  done
}

#line 323 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
device cident_matcher = match_regex (RE2 "[A-Za-z][A-Za-z0-9_]*");

#line 329 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
device decimal_integer_matcher = match_regex (RE2 "[0-9]+");

#line 340 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip optional (p:iochip_t[Buffer,Buffer])
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
  var b = read io.inp;
  device src = source b;
  device both = tryall_list (
    pipeline_list (oneshot[Buffer],p).list,
    pipeline_list (oneshot[Buffer], debug_buffer[Buffer] "Epsilon").list
  ).list;
  circuit
    connect src.out, both.inp
    wire io.out to both.out
  endcircuit
}

#line 363 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"
chip nobacktrack (p:iochip_t[Buffer,Buffer])
  connector io
    pin inp: %<Buffer
    pin out: %>Buffer
{
  device q = pipeline_list(p,oneshot[Buffer]).list;
  circuit
    wire io.inp to q.inp
    wire io.out to q.out
  endcircuit
}


#line 378 "/home/travis/build/felix-lang/felix/src/packages/chips.fdoc"

union symbol_t =
  | Terminal of string
  | Nonterminal of string
;

typedef production_t = list[symbol_t];
typedef alternatives_t = list[production_t];

typedef grammar_t = (start:string, strdict[alternatives_t]);

chip parse_simple_grammar
  connector io
    pin inp: %<string
    pin out: %>grammar_t
{
}


